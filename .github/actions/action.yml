name: publish-extractor
description: Publish extractors to CDF extractors catalog
inputs:
  python-version:
    description: Python version to use
    default: '3.10'
  artifactory_username:
    description: Artifactory username
    required: true
  artifactory_password:
    description: Artifactory password
    required: true
  command:
    description: 'Publish action including: publish,sync,run-schema,schema,validate'
    required: true
  manifest_path:
    description: Path to manifest file
  version:
    description: Version (use semver!) for artifact to upload
  config-files:
    description: List of config files to validate
  wrong-config-files:
    description: List of config files that should fail to validate
  extra-uris:
    description: An optional list of URIs with trailing / to look for schemas in.
  schema:
    description: Input schema file
  output:
    description: Output schema file
  no-verify:
    description: Skip SSL verification
  only-artifacts:
    description: Only upload artifacts, do not update release or extractor info
outputs:
  build-command:
    description: Some desc
    value: ${{ steps.build-command.outputs.result }}
runs:
  using: composite
  steps:
    - name: Ensure python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}

    - name: Build command
      id: build-command
      uses: actions/github-script@v6
      with:
        script: |
          if ('${{ inputs.command }}'.trim() == '') {
            core.exit('command is required')
            process.exit(1)
          }
          
          switch('${{ inputs.command }}') {
            case 'publish':
              let command = 'publish-extractor publish '
              if ('${{ inputs.version }}'.trim() == '') {
                core.error("Version is required")
                process.exit(1)
              }
              command += '--version ${{ inputs.version }} '

              if ('${{ inputs.manifest_path }}'.trim() == '') {
                core.error("Path to manifest file is required")
                process.exit(1)
              }
              command += '--manifest ${{ inputs.manifest_path }} '

              if ('${{ inputs.no-verify }}'.trim() === 'true') {
                command += '--no-verify ${{ inputs.no-verify }} '
              }

              if ('${{ inputs.only-artifacts }}'.trim() === 'true') {
                command += '--only-artifacts ${{ inputs.only-artifacts }}'
              }
              return command

            case 'sync':
              let command = 'publish-extractor sync '
              if ('${{ inputs.manifest_path }}'.trim() == '') {
                core.error("Path to manifest file is required")
                process.exit(1)
              }

              command += '--manifest ${{ inputs.manifest_path }} '
              if ('${{ inputs.no-verify }}'.trim() === 'true') {
                command += '--no-verify ${{ inputs.no-verify }} '
              }
              return command

            case 'validate':
              let command = 'publish-extractor validate '
              if ('${{ inputs.manifest_path }}'.trim() == '') {
                core.error("Path to manifest file is required")
                process.exit(1)
              }

              command += '--manifest ${{ inputs.manifest_path }} '
              if ('${{ inputs.config-files }}'.trim() !== '') {
                let files = '${{ inputs.config-files }}'.trim().split(',')
                command += '--config-files ${{ inputs.config-files }} '
              }
              return command
            case 'run-schema':
              break
            case 'schema': 
              break
            default:
              core.error('unrecognized command passed')
            process.exit(1)
          }

    - name: Install publisher
      shell: bash
      run: pip install cognite-extractor-publisher --extra-index-url "https://${{ inputs.artifactory_username }}:${{ inputs.artifactory_password }}@cognite.jfrog.io/cognite/api/pypi/snakepit/simple"

    - name: Run publisher command
      shell: bash
      run: ${{ steps.build-command.outputs.result }}
